Spring_Core_annotation

Open AnnotationDemoApp : Constructor Injection
1. Annotation based mapping, start with Annotation Demo App.
2. Check for hierarchy of CoachAnnotation and open TennisCoachAnnotation class and look for @Component Annotation above class name.
3. Check for hierarchy of FortuneServiceAnnotation and open RandomFortuneServiceAnnotation class and look for @Component Annotation above class name.
tennisCoach:TennisCoachAnnotation
4. @Autowired Annotation is there on TennisCoachAnnotation Constructor.
5. Notice @Qualifer annotation used in the constructor parameter: Read Document : QualifierConstructorInjection.
	5.1 @Scope("prototype") is there to mark the scope
	5.2 @PreDestroy and @PostConstruct are  bean life cycle methods : Read Document : AnnotationLifeCycle
soccerDefaultBeanIdAnnotationCoach:SoccerDefaultBeanIdAnnotationCoach : Setter Injection - Multiple Setters
6. Use of default component name here, and 2 @autowired annotation with use of Qualifier.
badmintonCoachAnnotation:BadmintonCoachAnnotation: Instance Variable based Injection, using @Autowired
7. Observe @Autowired and @Qualifier on instance variable which is private.
swimCoachAnnotation:SwimCoachAnnotation: Read from properties file.
8. Look for @Value annotation, read is done from Properties files, specified in applicationContextAnnotation.xml file.
 
9. Analyse, debug is supported and look for printed messages for calling sequence of methods. 
Close AnnotationDemoApp

Open AnnotationBeanScopeDemoApp : Bean Scope Analysis : Read Document : AnnotationLifeCycle
1. Open AnnotationBeanScopeDemoApp, SwimCoachAnnotation and TennisCoachAnnotation Classes.
2. Look for singletonScope(Default) and Prototype scope in the classes.
3. Destroy method for prototype is never called, for singleton it is called post closing the context.
4. Analyse, debug is supported.
Close AnnotationBeanScopeDemoApp

If using Java 9 and above then read document : AnnotationIssueForJava9AndAbove
For Bean Introspector read document with name: JavaBeansIntrospector